package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"time_speak_server/graph/generated"
	"time_speak_server/src/exception"
	"time_speak_server/src/opts"
	"time_speak_server/src/service/hashtag"
	"time_speak_server/src/service/user"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ID is the resolver for the id field.
func (r *hashTagResolver) ID(ctx context.Context, obj *hashtag.HashTag) (string, error) {
	return obj.ObjectID.Hex(), nil
}

// User is the resolver for the user field.
func (r *hashTagResolver) User(ctx context.Context, obj *hashtag.HashTag) (*user.User, error) {
	u, err := r.userSvc.GetUser(ctx, obj.Uid)
	if err != nil {
		return nil, err
	}
	return &u, nil
}

// UpdateHashTag is the resolver for the updateHashTag field.
func (r *mutationResolver) UpdateHashTag(ctx context.Context, input generated.HashTagInput) (bool, error) {
	id, err := primitive.ObjectIDFromHex(input.ID)
	if err != nil {
		return false, exception.ErrInvalidID
	}
	// 查询是否存在
	_, err = r.hashtagSvc.GetHashTagByID(ctx, id)
	if err != nil {
		return false, err
	}
	var toUpdate []opts.Option
	if input.Name != nil {
		toUpdate = append(toUpdate, opts.WithString("name", *input.Name))
	}
	if input.Archived != nil {
		toUpdate = append(toUpdate, opts.WithArchived(*input.Archived))
	}
	if len(toUpdate) == 0 {
		return true, nil
	}
	err = r.hashtagSvc.UpdateHashTag(ctx, id, toUpdate...)
	return true, nil
}

// DeleteHashTag is the resolver for the deleteHashTag field.
func (r *mutationResolver) DeleteHashTag(ctx context.Context, input string) (bool, error) {
	id, err := primitive.ObjectIDFromHex(input)
	if err != nil {
		return false, exception.ErrInvalidID
	}
	tag, err := r.hashtagSvc.GetHashTagByID(ctx, id)
	if err != nil {
		return false, err
	}
	if !tag.Archived {
		return false, exception.ErrHashTagNotArchived
	}
	countByHashTag, err := r.memorySvc.GetMemoriesCountByHashTag(ctx, id)
	if err != nil {
		return false, err
	}
	if countByHashTag > 0 {
		return false, exception.ErrHashTagHasMemories
	}
	err = r.hashtagSvc.DeleteHashTag(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// AllHashTags is the resolver for the allHashTags field.
func (r *queryResolver) AllHashTags(ctx context.Context, input generated.ListInput) ([]*hashtag.HashTag, error) {
	tags, err := r.hashtagSvc.GetHashTags(ctx, input.Page, input.Size, input.ByCreate, input.Desc, input.Archived)
	if err != nil {
		return nil, err
	}
	return tags, nil
}

// HashTag returns generated.HashTagResolver implementation.
func (r *Resolver) HashTag() generated.HashTagResolver { return &hashTagResolver{r} }

type hashTagResolver struct{ *Resolver }
